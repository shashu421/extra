import java.lang.reflect.Field;
import java.util.Arrays;

public class CsvUtils {

    public static String[] getHeaders(Class<?> clazz) {
        // Get all declared fields of the class
        Field[] fields = clazz.getDeclaredFields();
        // Extract field names and return as an array of strings
        return Arrays.stream(fields)
                     .map(Field::getName)
                     .toArray(String[]::new);
    }
}


/////////////////

 import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVPrinter;
import org.springframework.stereotype.Service;

import java.io.IOException;
import java.io.StringWriter;
import java.lang.reflect.Field;
import java.util.List;

@Service
public class CsvExportService {

    public <T> String convertToCsv(List<T> objects, Class<T> clazz) throws IOException, IllegalAccessException {
        StringWriter stringWriter = new StringWriter();
        // Get headers dynamically
        String[] headers = CsvUtils.getHeaders(clazz);

        try (CSVPrinter csvPrinter = new CSVPrinter(stringWriter, CSVFormat.DEFAULT.withHeader(headers))) {
            for (T object : objects) {
                Field[] fields = clazz.getDeclaredFields();
                String[] values = new String[fields.length];
                for (int i = 0; i < fields.length; i++) {
                    fields[i].setAccessible(true);
                    values[i] = String.valueOf(fields[i].get(object));
                }
                csvPrinter.printRecord(values);
            }
        }
        return stringWriter.toString();
    }
}

///////////////////


import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.util.Arrays;
import java.util.List;

@RestController
@RequestMapping("/api")
public class UserController {

    private final CsvExportService csvExportService;

    public UserController(CsvExportService csvExportService) {
        this.csvExportService = csvExportService;
    }

    @GetMapping("/export-csv")
    public void exportCsv(HttpServletResponse response) throws IOException, IllegalAccessException {
        List<User> users = Arrays.asList(
            new User("Alice", "alice@example.com", 30),
            new User("Bob", "bob@example.com", 25)
        );

        String csvContent = csvExportService.convertToCsv(users, User.class);

        response.setContentType("text/csv");
        response.setHeader("Content-Disposition", "attachment; filename=users.csv");
        response.getWriter().write(csvContent);
    }
}
